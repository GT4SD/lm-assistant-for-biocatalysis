[project]
name = "lm-assistant-for-biocatalysis"
version = "0.0.1"
description = "This project focuses on streamlining and automating key tasks in protein modeling, optimization, and the design of experiments for biocatalyzed reactions."
authors = [{ name = " Y.G. Nana Teukam", email = "yves.g.nana@zgmail.com" }]
requires-python = ">=3.10,<3.12"
readme = "README.md"
dependencies = [
    "tqdm>=4.25.0,<5",
    "python-dotenv>=1.0.1,<2",
    "ipykernel>=6.29.5,<7",
    "pydantic-settings>=2.4.0,<3",
    "biopython~=1.84",
    "rdkit>=2024.3.5,<2025",
    "loguru>=0.7.2,<0.8",
    "streamlit==1.33",
    "colorama>=0.4.6,<0.5",
    "rxn-aa-mapper",
    "langchain-unstructured>=0.1.2,<0.2",
    "unstructured>=0.15.9,<0.16",
    "requests>=2.32.3,<3",
    "types-requests>=2.32.0.20240907,<3",
    "rcsbsearchapi>=1.6.0,<2",
    "protobuf==3.20.3",
    "importlib-resources>=6.4.5,<7",
    "langchain-ibm>=0.3.1,<0.4",
    "langchain>=0.3.3,<0.4",
    "langchain-community>=0.3.2,<0.4",
    "langchain-huggingface>=0.1.0,<0.2",
    "enzeptional>=1.0.4,<2",
    "bitsandbytes==0.42.0",
    "langchain-ollama>=0.2.0,<0.3",
    "pandas>=2.0.0,<3",
    "click>=8.1.8,<9",
    "transformers==4.46.3",
    "types-tabulate>=0.9.0.20241207,<0.10",
]

[project.scripts]
lmabc = "lmabc.cli:main"
lmabc-app = "lmabc.app.launcher:main"

[dependency-groups]
dev = [
    "jupyter>=1.0.0,<2",
    "mypy>=1.0.0,<2",
    "pytest>=7.4.4,<8",
    "pytest-cov>=5.0.0,<6",
    "ruff>=0.1.3,<0.2",
    "types-setuptools>=57.4.14,<58",
]

[tool.poetry_bumpversion.file."src/lmabc/__init__.py"]

[tool.uv]

[[tool.uv.index]]
name = "PyPI"
url = "https://pypi.org/simple/"
default = true

[tool.uv.sources]
rxn-aa-mapper = { git = "https://github.com/rxn4chemistry/rxnaamapper.git" }

[tool.hatch.build.targets.sdist]
include = [
    "src/lmabc",
    "lmabc/py.typed",
    "resources/*",
    "resources/*/*",
    "assets/*",
    "tools_setup/*",
]

[tool.hatch.build.targets.wheel]
include = [
    "src/lmabc",
    "lmabc/py.typed",
    "resources/*",
    "resources/*/*",
    "assets/*",
    "tools_setup/*",
]

[tool.hatch.build.targets.wheel.sources]
"src/lmabc" = "lmabc"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
check_untyped_defs = true

ignore_missing_imports = true

[tool.ruff]
# Include also Jupyter notebooks.
extend-include = ["*.ipynb"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4

target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
preview = true
select = [
    "E4", 
    "E7", 
    "E9", 
    "F", 
    "W291", 
    "W292", 
    "W505", 
    "E721",
    "I",
    "N801",
    "N802",
    "N803",
    "N804",
    "N805",
    "N806",
    "N816",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D300",
    "UP010",
    "UP011",
    "UP019",
    "UP032",
    "ARG",
    "PTH",
    "LOG001",
    "LOG002",
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
preview = true
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
